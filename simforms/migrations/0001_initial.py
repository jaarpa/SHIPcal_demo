# Generated by Django 3.0.3 on 2020-06-25 02:44

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Fuels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuel', models.CharField(max_length=30, verbose_name='Fuel')),
                ('co2factor', models.FloatField(verbose_name='CO2 Ton per')),
            ],
            options={
                'verbose_name': 'Fuel',
                'verbose_name_plural': 'Fuels',
            },
        ),
        migrations.CreateModel(
            name='FuelUnits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor_name', models.CharField(max_length=10, verbose_name='Conversion factor')),
                ('conversion_factor', models.FloatField(verbose_name='Conversion factor')),
                ('fuel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simforms.Fuels')),
            ],
            options={
                'verbose_name': 'Fuel unit',
                'verbose_name_plural': 'Fuels units',
            },
        ),
        migrations.CreateModel(
            name='Locations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pais', django_countries.fields.CountryField(max_length=2, verbose_name='Country')),
                ('city', models.CharField(max_length=200, verbose_name='City')),
                ('location_aux', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('lat', models.FloatField(verbose_name='Latitude')),
                ('lon', models.FloatField(verbose_name='Longitude')),
            ],
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('email', models.EmailField(max_length=254, verbose_name='e-mail')),
                ('industry', models.CharField(max_length=30, verbose_name='Industry')),
                ('sectorIndustry', models.CharField(max_length=30, verbose_name='Industry sector')),
                ('process', models.TextField(blank=True, null=True, verbose_name='Process description')),
                ('date', models.DateTimeField(auto_now=True, verbose_name='Date')),
                ('co2TonPrice', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='The CO2 price cannot be less than 0')])),
                ('businessModel', models.CharField(choices=[('turnkey', 'Turnkey project'), ('ESCO', 'ESCO')], max_length=10, verbose_name='Business model')),
                ('fuel_price', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='The fuel price cannot be less than 0')], verbose_name='Fuel price')),
                ('pais', django_countries.fields.CountryField(max_length=2, verbose_name='Country')),
                ('surface', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='The available surface cannot be less than 0')], verbose_name='Available surface')),
                ('distance', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='The distance cannot be less than 0')], verbose_name='Distance to process')),
                ('fluid', models.CharField(choices=[('water', 'Water'), ('steam', 'Steam'), ('oil', 'Thermal oil'), ('moltenSalt', 'Molten salts')], max_length=15, verbose_name='Fluid')),
                ('tempOUT', models.FloatField(verbose_name='Outlet temperature')),
                ('tempIN', models.FloatField(verbose_name='Inlet temperature')),
                ('connection', models.CharField(choices=[('direct', 'Direct to process'), ('w_storage', 'With intermediate deposit')], max_length=30, verbose_name='Connection type')),
                ('pressureUnit', models.FloatField(choices=[(1, 'bar'), (10, 'MPa'), (0.06894757293, 'psi')], verbose_name='Pressure unit')),
                ('pressure', models.FloatField(verbose_name='Pressure')),
                ('demand', models.FloatField(validators=[django.core.validators.MinValueValidator(0.001, message='The demand cannot be less or equal to 0')], verbose_name='Annual energy demand')),
                ('demandUnit', models.FloatField(choices=[(1, 'kWh/year'), (1000, 'MWh/year'), (0.000277778, 'KJ/year'), (0.000293071, 'BTU/year'), (0.01163, 'kcal/year')], verbose_name='Demand unit')),
                ('hourEND', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1, message='The ending time cannot be less than 1'), django.core.validators.MaxValueValidator(24, message='The ending time cannot be greater than 24')], verbose_name='Ending time')),
                ('hourINI', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(0, message='The starting time cannot be less than 0'), django.core.validators.MaxValueValidator(23, message='The starting time cannot be greater than 23')], verbose_name='Starting time')),
                ('Jan', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Jan')),
                ('Feb', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Feb')),
                ('Mar', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Mar')),
                ('Apr', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Apr')),
                ('May', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='May')),
                ('Jun', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Jun')),
                ('Jul', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Jul')),
                ('Aug', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Aug')),
                ('Sep', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Sep')),
                ('Oct', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Oct')),
                ('Nov', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Nov')),
                ('Dec', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Dec')),
                ('Mond', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Mon')),
                ('Tues', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Tue')),
                ('Wend', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Wed')),
                ('Thur', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Thu')),
                ('Fri', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Fri')),
                ('Sat', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Sat')),
                ('Sun', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0'), django.core.validators.MaxValueValidator(1, message='This cannot be greater than 1')], verbose_name='Sun')),
                ('terrain', models.CharField(blank=True, choices=[('clean_ground', 'Clean ground')], default='clean_ground', max_length=30, null=True, verbose_name='Terrain type')),
                ('orientation', models.CharField(blank=True, choices=[('NS', 'North-South')], default='NS', max_length=30, null=True, verbose_name='Orientation')),
                ('inclination', models.CharField(blank=True, choices=[('flat', 'Flat')], default='flat', max_length=30, null=True, verbose_name='Inclination')),
                ('shadows', models.CharField(blank=True, choices=[('free', 'Shadows free')], default='free', max_length=30, null=True, verbose_name='Shadows')),
                ('num_loops', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0')], verbose_name='Number of loops')),
                ('n_coll_loop', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0')], verbose_name='Collectors per loop')),
                ('type_integration', models.CharField(choices=[('SL_L_P', 'SL_L_P'), ('SL_L_PS', 'SL_L_PS'), ('SL_L_RF', 'SL_L_RF'), ('SL_L_DRF', 'SL_L_DRF'), ('SL_L_S', 'SL_L_S'), ('SL_L_S_PH', 'SL_L_S_PH'), ('SL_S_FW', 'SL_S_FW'), ('SL_S_FWS', 'SL_S_FWS'), ('SL_S_PD_OT', 'SL_S_PD_OT'), ('PL_E_PM', 'PL_E_PM'), ('SL_S_MW', 'SL_S_MW'), ('SL_S_MWS', 'SL_S_MWS'), ('SL_S_PD', 'SL_S_PD'), ('SL_S_PDS', 'SL_S_PDS')], max_length=20, verbose_name='Integration schema')),
                ('almVolumen', models.FloatField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0, message='This cannot be less than 0')], verbose_name='Thermal storage capacity')),
                ('mofINV', models.FloatField(blank=True, default=1, verbose_name='Investment modificator')),
                ('mofDNI', models.FloatField(blank=True, default=1, verbose_name='Solar radiation modificator')),
                ('mofProd', models.FloatField(blank=True, default=1, verbose_name='Production modificator')),
                ('fuel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simforms.Fuels')),
                ('fuel_price_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simforms.FuelUnits')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simforms.Locations')),
            ],
        ),
        migrations.CreateModel(
            name='MeteoData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month_sim', models.PositiveSmallIntegerField()),
                ('day_sim', models.PositiveSmallIntegerField()),
                ('hour_sim', models.PositiveSmallIntegerField()),
                ('hour_year_sim', models.PositiveSmallIntegerField()),
                ('DNI', models.FloatField()),
                ('GHI', models.FloatField()),
                ('temp', models.FloatField()),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simforms.Locations')),
            ],
        ),
        migrations.AddField(
            model_name='fuels',
            name='co2units',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='simforms.FuelUnits'),
        ),
    ]
